program
  version
    OPENQASM
    3.0
    ;
  statementOrScope
    statement
      includeStatement
        include
        "stdgates.inc"
        ;
  statementOrScope
    statement
      quantumDeclarationStatement
        qubitType
          qubit
        qb
        ;
  statementOrScope
    statement
      quantumDeclarationStatement
        qubitType
          qubit
          designator
            [
            expression
              5
            ]
        qbs
        ;
  statementOrScope
    statement
      classicalDeclarationStatement
        scalarType
          bit
        cb
        ;
  statementOrScope
    statement
      classicalDeclarationStatement
        scalarType
          bit
          designator
            [
            expression
              5
            ]
        cbs
        ;
  statementOrScope
    statement
      classicalDeclarationStatement
        scalarType
          int
        test
        =
        declarationExpression
          expression
            20
        ;
  statementOrScope
    statement
      defStatement
        def
        f1
        (
        argumentDefinitionList
          argumentDefinition
            qubitType
              qubit
            q
        )
        scope
          {
          statementOrScope
            statement
              gateCallStatement
                x
                gateOperandList
                  gateOperand
                    indexedIdentifier
                      q
                ;
          }
  statementOrScope
    statement
      defStatement
        def
        f2
        (
        argumentDefinitionList
          argumentDefinition
            qubitType
              qubit
            q1
          ,
          argumentDefinition
            qubitType
              qubit
            q2
        )
        scope
          {
          statementOrScope
            statement
              gateCallStatement
                h
                gateOperandList
                  gateOperand
                    indexedIdentifier
                      q1
                ;
          statementOrScope
            statement
              gateCallStatement
                gateModifier
                  ctrl
                  @
                x
                gateOperandList
                  gateOperand
                    indexedIdentifier
                      q1
                  ,
                  gateOperand
                    indexedIdentifier
                      q2
                ;
          }
  statementOrScope
    statement
      defStatement
        def
        f3
        (
        argumentDefinitionList
          argumentDefinition
            qubitType
              qubit
              designator
                [
                expression
                  5
                ]
            q
        )
        scope
          {
          statementOrScope
            statement
              forStatement
                for
                scalarType
                  int
                i
                in
                [
                rangeExpression
                  expression
                    0
                  :
                  expression
                    4
                ]
                statementOrScope
                  scope
                    {
                    statementOrScope
                      statement
                        gateCallStatement
                          z
                          gateOperandList
                            gateOperand
                              indexedIdentifier
                                q
                                indexOperator
                                  [
                                  expression
                                    i
                                  ]
                          ;
                    }
          }
  statementOrScope
    statement
      defStatement
        def
        f4
        (
        argumentDefinitionList
          argumentDefinition
            qubitType
              qubit
              designator
                [
                expression
                  5
                ]
            q
          ,
          argumentDefinition
            scalarType
              bit
              designator
                [
                expression
                  5
                ]
            b
        )
        returnSignature
          ->
          scalarType
            bit
        scope
          {
          statementOrScope
            statement
              gateCallStatement
                gateModifier
                  ctrl
                  @
                x
                gateOperandList
                  gateOperand
                    indexedIdentifier
                      b
                      indexOperator
                        [
                        expression
                          0
                        ]
                  ,
                  gateOperand
                    indexedIdentifier
                      q
                      indexOperator
                        [
                        expression
                          0
                        ]
                ;
          statementOrScope
            statement
              gateCallStatement
                gateModifier
                  ctrl
                  @
                x
                gateOperandList
                  gateOperand
                    indexedIdentifier
                      b
                      indexOperator
                        [
                        expression
                          1
                        ]
                  ,
                  gateOperand
                    indexedIdentifier
                      q
                      indexOperator
                        [
                        expression
                          1
                        ]
                ;
          statementOrScope
            statement
              assignmentStatement
                indexedIdentifier
                  b
                  indexOperator
                    [
                    expression
                      2
                    ]
                =
                measureExpression
                  measure
                  gateOperand
                    indexedIdentifier
                      q2
                ;
          statementOrScope
            statement
              ifStatement
                if
                (
                expression
                  expression
                    expression
                      b
                    indexOperator
                      [
                      expression
                        3
                      ]
                  ==
                  expression
                    1
                )
                statementOrScope
                  scope
                    {
                    statementOrScope
                      statement
                        expressionStatement
                          expression
                            expression
                              expression
                                b
                              indexOperator
                                [
                                expression
                                  2
                                ]
                            <<
                            expression
                              1
                          ;
                    }
          statementOrScope
            statement
              returnStatement
                return
                expression
                  expression
                    b
                  indexOperator
                    [
                    expression
                      2
                    ]
                ;
          }
  statementOrScope
    statement
      defStatement
        def
        f5
        (
        argumentDefinitionList
          argumentDefinition
            qubitType
              qubit
            q
          ,
          argumentDefinition
            scalarType
              int
            v
          ,
          argumentDefinition
            scalarType
              bit
            b
        )
        returnSignature
          ->
          scalarType
            int
        scope
          {
          statementOrScope
            statement
              assignmentStatement
                indexedIdentifier
                  b
                =
                measureExpression
                  measure
                  gateOperand
                    indexedIdentifier
                      q
                ;
          statementOrScope
            statement
              ifStatement
                if
                (
                expression
                  expression
                    b
                  ==
                  expression
                    0
                )
                statementOrScope
                  scope
                    {
                    statementOrScope
                      statement
                        assignmentStatement
                          indexedIdentifier
                            v
                          +=
                          expression
                            10
                          ;
                    }
                else
                statementOrScope
                  scope
                    {
                    statementOrScope
                      statement
                        assignmentStatement
                          indexedIdentifier
                            v
                          -=
                          expression
                            10
                          ;
                    }
          statementOrScope
            statement
              returnStatement
                return
                expression
                  v
                ;
          }
  statementOrScope
    statement
      expressionStatement
        expression
          f1
          (
          expressionList
            expression
              qb
          )
        ;
  statementOrScope
    statement
      expressionStatement
        expression
          f2
          (
          expressionList
            expression
              expression
                qbs
              indexOperator
                [
                expression
                  0
                ]
            ,
            expression
              expression
                qbs
              indexOperator
                [
                expression
                  1
                ]
          )
        ;
  statementOrScope
    statement
      expressionStatement
        expression
          f3
          (
          expressionList
            expression
              qbs
          )
        ;
  statementOrScope
    statement
      assignmentStatement
        indexedIdentifier
          cb
        =
        expression
          f4
          (
          expressionList
            expression
              qbs
            ,
            expression
              cbs
          )
        ;
  statementOrScope
    statement
      classicalDeclarationStatement
        scalarType
          int
        var
        =
        declarationExpression
          expression
            f5
            (
            expressionList
              expression
                qb
              ,
              expression
                test
              ,
              expression
                expression
                  cbs
                indexOperator
                  [
                  expression
                    3
                  ]
            )
        ;
  <EOF>