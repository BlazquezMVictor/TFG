program
  statementOrScope
    statement
      quantumDeclarationStatement
        qubitType
          qubit
          designator
            [
            expression
              5
            ]
        q1
        ;
  statementOrScope
    statement
      quantumDeclarationStatement
        qubitType
          qubit
          designator
            [
            expression
              5
            ]
        qq1
        ;
  statementOrScope
    statement
      classicalDeclarationStatement
        scalarType
          bit
          designator
            [
            expression
              5
            ]
        b1
        ;
  statementOrScope
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            int
          ,
          expressionList
            expression
              5
          ]
        i1
        ;
  statementOrScope
    statement
      aliasDeclarationStatement
        let
        q2
        =
        aliasExpression
          expression
            expression
              qq1
            indexOperator
              [
              setExpression
                {
                expression
                  0
                ,
                expression
                  2
                ,
                expression
                  4
                }
              ]
        ;
  statementOrScope
    statement
      aliasDeclarationStatement
        let
        q3
        =
        aliasExpression
          expression
            expression
              q1
            indexOperator
              [
              rangeExpression
                expression
                  1
                :
                expression
                  3
              ]
        ;
  statementOrScope
    statement
      aliasDeclarationStatement
        let
        b2
        =
        aliasExpression
          expression
            expression
              b1
            indexOperator
              [
              setExpression
                {
                expression
                  0
                ,
                expression
                  2
                ,
                expression
                  4
                }
              ]
        ;
  statementOrScope
    statement
      aliasDeclarationStatement
        let
        b3
        =
        aliasExpression
          expression
            expression
              b1
            indexOperator
              [
              rangeExpression
                expression
                  1
                :
                expression
                  3
              ]
        ;
  statementOrScope
    statement
      aliasDeclarationStatement
        let
        i2
        =
        aliasExpression
          expression
            expression
              i1
            indexOperator
              [
              setExpression
                {
                expression
                  0
                ,
                expression
                  2
                ,
                expression
                  4
                }
              ]
        ;
  statementOrScope
    statement
      aliasDeclarationStatement
        let
        i3
        =
        aliasExpression
          expression
            expression
              i1
            indexOperator
              [
              rangeExpression
                expression
                  1
                :
                expression
                  3
              ]
        ;
  statementOrScope
    statement
      gateCallStatement
        x
        gateOperandList
          gateOperand
            indexedIdentifier
              q2
              indexOperator
                [
                expression
                  1
                ]
        ;
  statementOrScope
    statement
      gateCallStatement
        x
        gateOperandList
          gateOperand
            indexedIdentifier
              q3
              indexOperator
                [
                expression
                  0
                ]
        ;
  statementOrScope
    statement
      assignmentStatement
        indexedIdentifier
          b1
          indexOperator
            [
            expression
              1
            ]
        =
        expression
          ~
          expression
            expression
              b2
            indexOperator
              [
              expression
                1
              ]
        ;
  statementOrScope
    statement
      assignmentStatement
        indexedIdentifier
          b1
          indexOperator
            [
            expression
              1
            ]
        =
        expression
          ~
          expression
            expression
              b3
            indexOperator
              [
              expression
                0
              ]
        ;
  statementOrScope
    statement
      assignmentStatement
        indexedIdentifier
          i1
          indexOperator
            [
            expression
              1
            ]
        =
        expression
          expression
            expression
              i2
            indexOperator
              [
              expression
                1
              ]
          +
          expression
            5
        ;
  statementOrScope
    statement
      assignmentStatement
        indexedIdentifier
          i1
          indexOperator
            [
            expression
              1
            ]
        =
        expression
          expression
            expression
              i3
            indexOperator
              [
              expression
                0
              ]
          +
          expression
            5
        ;
  <EOF>